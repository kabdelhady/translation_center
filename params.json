{"name":"Translation center","tagline":"","body":"Translation admin must extend User model and implement a boolean method named can_admin_translations?\r\n\r\n\r\n## Getting started\r\n\r\nTranslationCenter works with Rails 3.2 onwards. You can add it to your Gemfile with:\r\n\r\n```ruby\r\ngem 'translation_center', :git => 'git@github.com:mahkhaled/translation_center.git'\r\n```\r\n\r\nRun bundle install command.\r\n\r\nTranslationCenter depends on Devise, so make sure you installed it successfully https://github.com/plataformatec/devise#starting-with-rails\r\n\r\nAfter you install TranslationCenter and add it to your Gemfile, you need to run the generator:\r\n\r\n```ruby\r\nrails generate translation_center:install en ar de\r\n ```\r\n\r\nThis will add three languages to the translation center, you need to add them in the config/translation_center.yaml\r\n\r\n```ruby\r\ndevelopment:\r\n  lang:\r\n    en: 'English'\r\n    ar: 'Arabic'\r\n    de: 'German'\r\n```\r\n\r\nif you don't supply languages for the generator it will support only English.\r\n\r\nAnd run the migrations\r\n\r\n```ruby\r\nrake db:migrate\r\n```\r\n\r\nIn your User model or any other model that should acts as a translator add the following line:\r\n\r\n```ruby\r\nacts_as_translator\r\n```\r\n\r\nIn routes file add \r\n\r\n```ruby\r\nmount TranslationCenter::Engine => \"/translation_center\"\r\n```\r\n\r\nYou now need to define who is the translation center admin. Admin can accept translations, manage translation keys and do more things. To define your admin, you need to override User#can_admin_translations? method like the following....\r\n\r\n```ruby\r\ndef can_admin_translations?\r\n  self.email == 'admin@tc.com'\r\nend\r\n```\r\n\r\n## How to use\r\n\r\nTo migrate translations from TranslationCenter database to yaml files\r\n\r\n```ruby\r\nrake translation_center:db2yaml\r\n```\r\n\r\nTo migrate translations from yaml files to TranslationCenter database \r\n\r\n```ruby\r\nrake translation_center:yaml2db\r\n```\r\n\r\nBut imported translations should have translator. You can edit translator email from translation_center.yml The rake task yaml2db will create this user if not exists\r\n\r\n```ruby\r\nyaml_translator_email: 'coder@tc.com'\r\n```\r\n\r\nThe imported translations status will be ACCEPTED by default. If you want to disable that, comment the following line in translation_center.yaml\r\n\r\n```ruby\r\nyaml2db_translations_accepted: true\r\n```\r\n\r\nAny I18n.translate method will display translations from database ACCEPTED translations. If you want to skip database translations and set to use yaml translations, comment the following line in translation_center.yaml\r\n\r\n```ruby\r\ni18n_source: 'db' # can be db or yaml; default is yaml\r\n```\r\n\r\n#Add new language\r\n\r\nIf you want to add a language to the translation center, you need to run the generator:\r\n\r\n```ruby\r\nrails g migration translation_center:add_lang es fr\r\nrake db:migrate\r\n```\r\n\r\nYou will also need to add the language to config/translation_center.yml\r\n\r\n```ruby\r\ndevelopment:\r\n  lang:\r\n    en: 'English'\r\n    ar: 'Arabic'\r\n    de: 'German'\r\n    es: 'Espaniol'\r\n    fr: 'French'\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}